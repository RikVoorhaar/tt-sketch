"""DEPRECATED"""

import numpy as np
from tt_sketch.drm_base import DRM
from tt_sketch.sketching_methods.tensor_train_sketch import tensor_train_sketch
from tt_sketch.tensor import DenseTensor
from tt_sketch.utils import ArrayList, matricize
from tt_sketch.sketch_container import YZContainer


def dense_sketch(
    tensor,
    left_sketch,
    right_sketch,
) -> YZContainer:
    X = tensor.data
    phi_mats = left_sketch.sketch_dense(tensor)
    omega_mats = right_sketch.sketch_dense(tensor)

    Psi_cores = []
    Omega_mats = []
    cdef int n_dims = len(tensor.shape)
    cdef double[:,:] X_mat
    cdef double[:,:,:] X_tens
    cdef double[:,:,:] Y
    cdef double[:,:] Z
    cdef int mu
    cdef double[:,:] phi
    cdef double[:,:] omega


    for mu in range(n_dims):
        if mu == 0:
            X_mat = matricize(X, 0, mat_shape=True)
            omega = omega_mats[0].T
            phi = phi_mats[0]
            with nogil:
                Y = X_mat @ omega
                Z = phi @ Y
            Y_arr = np.array(Y)
            Y_arr = Y_arr.reshape((1,) + Y_arr.shape)
            Psi_cores.append(np.array(Y_arr))
            Omega_mats.append(np.array(Z))
        elif mu == n_dims - 1:
            X_mat = matricize(X, n_dims - 1, mat_shape=True).T
            phi = phi_mats[mu - 1]
            with nogil:
                Y = phi @ X_mat
            Y_arr = np.array(Y)
            Y_arr = Y_arr.reshape(Y_arr.shape + (1,))
            Psi_cores.append(Y)
        else:
            # Compute order 3 tensorisation of X
            X_tens_arr = matricize(X, range(mu + 1), mat_shape=False)
            X_tens = X_tens.reshape(
                np.prod(X_tens.shape[:mu], dtype=int),
                X_tens.shape[mu],
                X_tens.shape[mu + 1],
            )
            
            Y = np.einsum(
                "ij,jkl,ml->ikm", phi_mats[mu - 1], X_tens, omega_mats[mu]
            )
            Psi_cores.append(Y)

            X_mat = X_tens.reshape(
                X_tens.shape[0] * X_tens.shape[1], X_tens.shape[2]
            )
            Z = phi_mats[mu] @ X_mat @ omega_mats[mu].T
            Omega_mats.append(Z)

    return YZContainer(Psi_cores, Omega_mats)